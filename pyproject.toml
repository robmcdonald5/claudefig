[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "claudefig"
dynamic = ["version"]
description = "Universal config CLI tool for setting up Claude Code repositories"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["claude", "claude-code", "cli", "configuration", "repo-setup"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.0,<9.0",
    "rich>=13.0,<14.0",
    "textual>=0.47.0",
    "jinja2>=3.0,<4.0",
    "tomli>=2.0; python_version < '3.11'",
    "tomli-w>=1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "tox>=4.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/claudefig"
Documentation = "https://github.com/yourusername/claudefig#readme"
Repository = "https://github.com/yourusername/claudefig"
Changelog = "https://github.com/yourusername/claudefig/blob/main/CHANGELOG.md"
Issues = "https://github.com/yourusername/claudefig/issues"

[project.scripts]
claudefig = "claudefig.__main__:main"

# Hatchling configuration
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/claudefig/_version.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/CHANGELOG.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/claudefig", "src/templates", "src/claudefig_data"]

# Ruff formatter configuration (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by ruff format)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=claudefig",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/tui/*",  # Exclude TUI from coverage (complex UI testing, manual QA preferred)
]

[tool.coverage.report]
fail_under = 70.0  # Improved threshold for core business logic (excluding TUI/CLI)
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
]
precision = 2
skip_empty = true
